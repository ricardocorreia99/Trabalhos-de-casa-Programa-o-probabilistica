Exercicio 1:
Crie uma função sondagens(tamanho) que gere sondagens

~~~~
// indecisos são os partidos menores
// sonagem recebe a variável tamanho, que é o numero de pessoas a que foi feito sondagem

// viz.marginals mostra um gráfico por partido


// esta parte serviu só para treinar

var prop = {"ps":36.34,"psd":27.76,"cdu":6.33,"cds":4.22, "be":9.52,
"pan":3.32,"chega":1.29,"il":1.29, "livre":1.09, "indecisos":8.84}
var pares = _.toPairs(prop)
print(pares)
var tuplo = _.unzip(pares)
var partidos = tuplo[0]
var percentagens = tuplo[1]
print(partidos)
print(percentagens)
var dic = _.fromPairs(_.zip("partidos percentagens".split(" "), tuplo))
print(dic)
print(dic.partidos)
print(dic.percentagens)
~~~~

~~~~
// criar probabilidades random

var modelo=function(){
  return _.values(dirichlet(ones([5,1])).data)
}

//modelo()


var martelada=function(){
  var num=5
  var L=mapN(function(T){uniform(0,1)},num)
  var S=sum(L)
  
  var x=map(function(p){p/S},L)
  var soma=sum(x)
  print(soma)
}

martelada()
~~~~

~~~~
// resposta á questão 1

var sondagem=function(tamanho){
  var prop = {"ps":36.34,"psd":27.76,"cdu":6.33,"cds":4.22, "be":9.52,"pan":3.32,"chega":1.29,"il":1.29, "livre":1.09, "indecisos":8.84}
  var pares = _.toPairs(prop)
  var tuplo = _.unzip(pares)
  var partidos = tuplo[0]
  //print(partidos)
  var percentagens = tuplo[1]
  //print(percentagens)
  var norm=map(function(p){p/100},percentagens)
  
  var quantos_votaram=multinomial({ps:norm,n:tamanho})
  //print(quantos_votaram)
  var dic = _.zip(partidos, quantos_votaram)
  var dic2 = _.fromPairs(dic)
  //print(dic2)
  return dic2
  
}

sondagem(10000)
~~~~

Exercicio 2,3 e 4:
 

Utilizando os resultados da sondagem, crie um modelo para as
probabilidades de um eleitor votar em cada partido

 Use o viz.marginals para mostrar o resultado gráficamente
 Use o estimador do High Density Interval para estimar o intervalo da
probabilidade para cada partido



~~~~
var sondagem=function(tamanho){
  var prop = {"ps":36.34,"psd":27.76,"cdu":6.33,"cds":4.22, "be":9.52,"pan":3.32,"chega":1.29,"il":1.29, "livre":1.09, "indecisos":8.84}
  var pares = _.toPairs(prop)
  var tuplo = _.unzip(pares)
  var partidos = tuplo[0]
  //print(partidos)
  var percentagens = tuplo[1]
  //print(percentagens)
  var norm=map(function(p){p/100},percentagens)
  
  var quantos_votaram=multinomial({ps:norm,n:tamanho})
  //print(quantos_votaram)
  var dic = _.zip(partidos, quantos_votaram)
  var dic2 = _.fromPairs(dic)
  //print(dic2)
  return dic2
  
}




var numero_votantes=10000
var sond=sondagem(numero_votantes)
var pares = _.toPairs(sond)
var tuplo = _.unzip(pares)


//var randomProbs=function(){
  //return _.values(dirichlet(ones([(_.values(sond)).length,1])).data)
//}
var randomProbs=function(){
  var num=(_.values(sond)).length
  var L=mapN(function(T){uniform(0,1)},num)
  var S=sum(L)
  
  var x=map(function(p){p/S},L)
  return x
}

var modelo=function(){
  var pares = _.toPairs(sond)
  var tuplo = _.unzip(pares)
  var partidos = tuplo[0]
  var votantes = tuplo[1]
  
  var infer_probs=randomProbs()
  
  var infer_votantes=Multinomial({ps:infer_probs,n:numero_votantes})
  var dic = _.zip(partidos, infer_probs)
  var dic2 = _.fromPairs(dic)
  observe(infer_votantes,votantes)
  return dic2
}


var func=function(){
  return modelo()
}
var x=Infer({method: "MCMC", samples: 10000},func)
viz.marginals(x)





var estimar_intervalo = function(dist, margem, low, high) {
  expectation(marginalize(dist, margem), function(p) {low < p && p < high})
}

var HDI = function(dist, margem, low, high, delta) {
  var p = estimar_intervalo(dist, margem, low, high)
  if (p <= 0.95) return [low, high]
  var A  = estimar_intervalo(dist, margem, low + delta, high)
  var B  = estimar_intervalo(dist, margem, low, high - delta)
  return A > B ? HDI(dist, margem, low + delta, high, delta) : HDI(dist, margem, low, high - delta, delta)
}

var print_intervals = function(dist, margens) {
  map(function(m) {
    print(m + ": " + HDI(dist, m, 0, 1, 0.005))
  }, margens)
  
}



print_intervals(x,tuplo[0] )
~~~~

~~~~

~~~~
